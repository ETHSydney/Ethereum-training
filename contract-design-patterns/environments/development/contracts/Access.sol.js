// Factory "morphs" into a Pudding class.
// The reasoning is that calling load in each context
// is cumbersome.

(function() {

  var contract_data = {
    abi: [{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"members","outputs":[{"name":"","type":"address"}],"type":"function"},{"constant":false,"inputs":[{"name":"nominee","type":"address"},{"name":"isSpecial","type":"bool"}],"name":"addMember","outputs":[{"name":"success","type":"bool"}],"type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"member","outputs":[{"name":"joinDate","type":"uint256"},{"name":"exists","type":"bool"},{"name":"isSpecial","type":"bool"}],"type":"function"},{"inputs":[],"type":"constructor"}],
    binary: "600060608181526101006040818152426080818152600160a081905260c081905260e0869052600160a060020a03331687526020818152938720928355828101805460ff191690911761ff001916909417909355600281018054868255818752928620949593949193909282019185506100949291505b808211156100f6578054600160a060020a0319168155600101610076565b5050905050600060005080548060010182818154818355818115116100fa578280526100fa907f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5639081019083015b808211156100f657600081556001016100e2565b5090565b50505060009283525060208220018054600160a060020a031916331790556102889150819061012890396000f3606060405260e060020a60003504635daf08ca8114610031578063c9030ea014610076578063e7d4539e146100b9575b005b6100e4600435600080548290811015610002575080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630154600160a060020a031681565b61010160043560243560408051602081810183526000808352600160a060020a03331681526001918290529283200154610100900460ff16151561013157610002565b6101136004356001602081905260009182526040909120805491015460ff8082169161010090041683565b60408051600160a060020a03929092168252519081900360200190f35b60408051918252519081900360200190f35b60408051938452602084019290925282820152519081900360600190f35b604080516080810182524281526001602082810182815283850188815260608501878152600160a060020a038b166000908152858552968720865181559251948301805492516101000260ff199390931690951761ff001916919091179093559151805160028401805482825581885296849020959694959094810193919290910182156101ec579160200282015b828111156101ec5782518254600160a060020a03191617825560209290920191600191909101906101c0565b506102129291505b8082111561025a578054600160a060020a03191681556001016101f4565b50509050506000600050805480600101828181548183558181151161025e5781836000526020600020918201910161025e91905b8082111561025a5760008155600101610246565b5090565b5050506000928352506020909120018054600160a060020a0319169094179093555060019291505056",
    unlinked_binary: "600060608181526101006040818152426080818152600160a081905260c081905260e0869052600160a060020a03331687526020818152938720928355828101805460ff191690911761ff001916909417909355600281018054868255818752928620949593949193909282019185506100949291505b808211156100f6578054600160a060020a0319168155600101610076565b5050905050600060005080548060010182818154818355818115116100fa578280526100fa907f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5639081019083015b808211156100f657600081556001016100e2565b5090565b50505060009283525060208220018054600160a060020a031916331790556102889150819061012890396000f3606060405260e060020a60003504635daf08ca8114610031578063c9030ea014610076578063e7d4539e146100b9575b005b6100e4600435600080548290811015610002575080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630154600160a060020a031681565b61010160043560243560408051602081810183526000808352600160a060020a03331681526001918290529283200154610100900460ff16151561013157610002565b6101136004356001602081905260009182526040909120805491015460ff8082169161010090041683565b60408051600160a060020a03929092168252519081900360200190f35b60408051918252519081900360200190f35b60408051938452602084019290925282820152519081900360600190f35b604080516080810182524281526001602082810182815283850188815260608501878152600160a060020a038b166000908152858552968720865181559251948301805492516101000260ff199390931690951761ff001916919091179093559151805160028401805482825581885296849020959694959094810193919290910182156101ec579160200282015b828111156101ec5782518254600160a060020a03191617825560209290920191600191909101906101c0565b506102129291505b8082111561025a578054600160a060020a03191681556001016101f4565b50509050506000600050805480600101828181548183558181151161025e5781836000526020600020918201910161025e91905b8082111561025a5760008155600101610246565b5090565b5050506000928352506020909120018054600160a060020a0319169094179093555060019291505056",
    address: "0xfb554064ca11b0736a5f57f5966feee388272152",
    generated_with: "2.0.9",
    contract_name: "Access"
  };

  function Contract() {
    if (Contract.Pudding == null) {
      throw new Error("Access error: Please call load() first before creating new instance of this contract.");
    }

    Contract.Pudding.apply(this, arguments);
  };

  Contract.load = function(Pudding) {
    Contract.Pudding = Pudding;

    Pudding.whisk(contract_data, Contract);

    // Return itself for backwards compatibility.
    return Contract;
  }

  Contract.new = function() {
    if (Contract.Pudding == null) {
      throw new Error("Access error: Please call load() first before calling new().");
    }

    return Contract.Pudding.new.apply(Contract, arguments);
  };

  Contract.at = function() {
    if (Contract.Pudding == null) {
      throw new Error("Access error: Please call load() first before calling at().");
    }

    return Contract.Pudding.at.apply(Contract, arguments);
  };

  Contract.deployed = function() {
    if (Contract.Pudding == null) {
      throw new Error("Access error: Please call load() first before calling deployed().");
    }

    return Contract.Pudding.deployed.apply(Contract, arguments);
  };

  if (typeof module != "undefined" && typeof module.exports != "undefined") {
    module.exports = Contract;
  } else {
    // There will only be one version of Pudding in the browser,
    // and we can use that.
    window.Access = Contract;
  }

})();
